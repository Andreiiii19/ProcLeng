/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

//...

import lib.symbolTable.*;
import lib.attributes.*;
import lib.symbolTable.exceptions.*;
import java.util.ArrayList;
import lib.errores.*;
import lib.tools.SemanticFunctions;

public class alike implements alikeConstants {


        static SymbolTable st;
        static SemanticFunctions sf = new SemanticFunctions();

        private static void initSymbolTable() {
                boolean b;
                String[] palsRes = {
                "array","boolean","character","integer","procedure","if","then","elsif","else","end",
                        "while","loop","begin","ref","of","is","not","put_line","put","return","and","or",
                        "mod","skip_line","function","null","get","true","false","int2char","char2int"
                };

                st = new SymbolTable();

                st.insertReservedWords(palsRes);
        }



   public static void main(String[] args) {
           alike parser = null;
           initSymbolTable();

           try {
                   if(args.length == 0) {
                           parser = new alike(System.in);
                   }
                   else {
                           parser = new alike(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa();
                   System.out.println(st.toString());
                   //...
                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                   System.err.println("LEX_ERROR: " + e.getMessage());
           }
           catch (ParseException e) {
            System.err.println("PARSER_ERROR: " + e.getMessage());
        }
                catch (ErrorSemantico e) {
                        System.err.println("SEMANTIC_ERROR: " + e.getMessage());
                        System.err.println("***** An\u00e1lisis parado por un error *****");
                }
           //...
   }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void Programa() throws ParseException {Token name;
        Attributes at = new Attributes();
    jj_consume_token(tPROC);
    name = jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAP:{
      jj_consume_token(tAP);
      parametros_formales(at);
      jj_consume_token(tCP);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(tIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROC:
    case tFUNC:{
      label_1:
      while (true) {
        declaracion_procs_funcs();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROC:
        case tFUNC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(tBEGIN);
    instrucciones();
    jj_consume_token(tEND);
    jj_consume_token(tPC);
}

  static final public void declaracion_procedimiento() throws ParseException {Token name;
        Attributes att = new Attributes();
    name = cabecera_procedimiento(att);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROC:
    case tFUNC:{
      declaracion_procs_funcs();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(tBEGIN);
    instrucciones();
    jj_consume_token(tEND);
    jj_consume_token(tPC);
//System.err.println("Bloque" + name.image + "terminado \n" + st.toString());
                st.removeBlock();
}

  static final public void declaracion_funcion() throws ParseException {Attributes atType = new Attributes();
        Attributes atIsArray = new Attributes();
        Attributes atts = new Attributes();
        Token name;
    name = cabecera_funcion(atType,atIsArray,atts);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROC:
    case tFUNC:{
      declaracion_procs_funcs();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(tBEGIN);

    instrucciones();
    jj_consume_token(tEND);
    jj_consume_token(tPC);
//System.err.println("Bloque " + name.image + " terminado \n"+ st.toString());
                st.removeBlock();
                if(atType.type == Symbol.Types.ARRAY)
                {
                        {if (true) throw new ErrorSemantico("No se permiten funciones con retorno de vectores");}
                }
}

  static final public void declaracion_procs_funcs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROC:{
      declaracion_procedimiento();
      break;
      }
    case tFUNC:{
      declaracion_funcion();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void instrucciones() throws ParseException {
    label_2:
    while (true) {
      instruccion();
      jj_consume_token(tPC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tIF:
      case tWHILE:
      case tPLINE:
      case tPUT:
      case tRETURN:
      case tSKIP:
      case tNULL:
      case tGET:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
    }
}

  static final public void declaracion_variables() throws ParseException {
    label_3:
    while (true) {
      declaracion_var();
      jj_consume_token(tPC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
    }
}

  static final public ArrayList<Symbol> declaracion_var() throws ParseException {Attributes atType = new Attributes();
        Attributes atIsArray = new Attributes();
        ArrayList<Token> tokens;
        ArrayList<Symbol> symbols = new ArrayList<Symbol>();
    tokens = lista_ids();
    jj_consume_token(tDP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tREF:{
      jj_consume_token(tREF);
atType.parClass = Symbol.ParameterClass.REF;
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    tipo_variable(atType,atIsArray);
if(atType.parClass==Symbol.ParameterClass.NONE)atType.parClass=Symbol.ParameterClass.VAL;
                        for(Token t : tokens)
                        {
                                Symbol S = null;


                                //System.out.println(atType.type + " " + atIsArray.type);
                                if(atType.type == Symbol.Types.BOOL) S = new SymbolBool(t.image, atType.parClass);
                                if(atType.type == Symbol.Types.CHAR) S = new SymbolChar(t.image, atType.parClass);
                                if(atType.type == Symbol.Types.INT) S = new SymbolInt(t.image, atType.parClass);
                                if(atType.type == Symbol.Types.ARRAY)
                                {

                                        S = new SymbolArray(t.image, atType.inicio,atType.fin,atIsArray.type,atType.parClass);
                                }

                                symbols.add(S);

                                try {
                                        st.insertSymbol(S);
                                } catch (AlreadyDefinedSymbolException e)
                                {
                                        System.err.println("Error semantico. Simbolo ya existente");
                                }
                        }

                        {if ("" != null) return symbols;}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Token> lista_ids() throws ParseException {ArrayList<Token> tokens = new ArrayList<Token>();
        Token t;
    t = jj_consume_token(tID);
if(!st.isReservedWord(t.image))
                                {
                                        tokens.add(t);
                                }
                                else
                                {
                                        {if (true) throw new ErrorSemantico("ID no valido. Es una palabra reservada");}
                                }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMA:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(tCOMA);
      t = jj_consume_token(tID);
if(!st.isReservedWord(t.image)) tokens.add(t);
                                else {if (true) throw new ErrorSemantico("ID no valido. Es una palabra reservada");}
    }
System.err.println("Lista de ids ");
                        {if ("" != null) return tokens;}
    throw new Error("Missing return statement in function");
}

  static final public void lista_ids_o_string_o_inv(Attributes att) throws ParseException {Attributes at = new Attributes();
    expresion(at);
att.atts.add(at.clone());
                at = new Attributes();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(tCOMA);
      expresion(at);
att.atts.add(at.clone());
                at = new Attributes();
    }
att.type = att.atts.get(0).type;
}

  static final public Token cabecera_procedimiento(Attributes att) throws ParseException {Token name;
    jj_consume_token(tPROC);
    name = jj_consume_token(tID);
try {
                        Symbol S = new SymbolProcedure(name.image,att.parList);
                        st.insertSymbol(S);
                        st.insertBlock();
                }catch (AlreadyDefinedSymbolException ex)
                {
                        System.err.println("Error semantico. Simbolo ya existente");
                }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAP:{
      jj_consume_token(tAP);
      parametros_formales(att);
      jj_consume_token(tCP);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(tIS);
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
}

  static final public Token cabecera_funcion(Attributes atType,Attributes atIsArray,Attributes atts) throws ParseException {Token name;
        SymbolFunction S = null;
    jj_consume_token(tFUNC);
    name = jj_consume_token(tID);
try{
                        S = new SymbolFunction(name.image,atts.parList,atType.type);
                        st.insertSymbol(S);
                        st.insertBlock();
                } catch (AlreadyDefinedSymbolException ex)
                {
                        System.err.println("Error semantico. Simbolo ya existente");
                }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAP:{
      jj_consume_token(tAP);
      parametros_formales(atts);
      jj_consume_token(tCP);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(tRETURN);
    tipo_variable(atType,atIsArray);
    jj_consume_token(tIS);
S.returnType = atType.type;
                {if ("" != null) return name;}
    throw new Error("Missing return statement in function");
}

  static final public void parametros_formales(Attributes att) throws ParseException {ArrayList<Symbol> symbols;
    symbols = declaracion_var();
// try {
                        for(Symbol S : symbols)
                        {
                                att.parList.add(S);
                // 		st.insertSymbol(S);
                        }
                // } catch (AlreadyDefinedSymbolException ex)
                // {
                // 	System.err.println("Error semantico. Simbolo ya existente");
                // }

    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPC:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(tPC);
      symbols = declaracion_var();
for(Symbol S : symbols)
                {
                        att.parList.add(S);
                        // st.insertSymbol(S);
                }
    }
}

  static final public void instruccion() throws ParseException {Attributes att = new Attributes();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tGET:{
      inst_leer(att);
      break;
      }
    case tSKIP:{
      inst_saltar_linea(att);
      break;
      }
    case tPUT:{
      inst_escribir(att);
      break;
      }
    case tPLINE:{
      inst_escribir_linea(att);
      break;
      }
    case tID:{
      inst_invocacion_o_asignacion(att);
      break;
      }
    case tIF:{
      inst_if(att);
      break;
      }
    case tWHILE:{
      inst_while(att);
      break;
      }
    case tRETURN:{
      inst_return(att);
      break;
      }
    case tNULL:{
      inst_null(att);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void inst_leer(Attributes att) throws ParseException {
    jj_consume_token(tGET);
    jj_consume_token(tAP);
    lista_ids();
    jj_consume_token(tCP);
System.err.println("Expresion: " + att);
}

  static final public void inst_saltar_linea(Attributes att) throws ParseException {
    jj_consume_token(tSKIP);
System.err.println("Expresion: " + att);
}

  static final public void inst_escribir(Attributes att) throws ParseException {
    jj_consume_token(tPUT);
    jj_consume_token(tAP);
    lista_ids_o_string_o_inv(att);
    jj_consume_token(tCP);
System.err.println("Expresion: " + att);
}

  static final public void inst_escribir_linea(Attributes att) throws ParseException {
    jj_consume_token(tPLINE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAP:{
      jj_consume_token(tAP);
      lista_ids_o_string_o_inv(att);
      jj_consume_token(tCP);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
System.err.println("Expresion: " + att);
}

  static final public void inst_invocacion_o_asignacion(Attributes att) throws ParseException {Attributes at = new Attributes();
        Attributes at2 = new Attributes();
        Token t;
    t = jj_consume_token(tID);
try {
                        Symbol S = st.getSymbol(t.image);
                        sf.cambiarTipos(at2, S);
                        sf.asignar_valores(att,at2,t.image,S.type, S.parClass, st.level);
                } catch (SymbolNotFoundException ex)
                {
                        {if (true) throw new ErrorSemantico(t.image + " no existe.");}
                }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAP:{
      jj_consume_token(tAP);
      function_call(at2);
sf.checkTypeFunctionCall(at2);
      jj_consume_token(tCP);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tASIG:{
      jj_consume_token(tASIG);
      expresion(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                sf.checkTypesAsignacion(at,at2);
                at = new Attributes();
                at2 = new Attributes();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
System.err.println("Expresion/es de inv o asignacion: " + att);
}

// void inv_funcion(Attributes att):
// {
// 	Attributes at = new Attributes();
// }
// {
// 	(expresion(at) 
// 	{
// 		att.atts.add(at.clone());
// 	}
// 	(<tCOMA> expresion(at)
// 	{
// 		att.atts.add(at.clone());
// 	}
// 	)*)
// 	{System.err.println("Expresion/es de inv a funcion: " + att);}
// }
  static final public 
void inst_if(Attributes att) throws ParseException {Attributes at = new Attributes();
    jj_consume_token(tIF);
    expresion(at);
System.err.println("Expresion if tipo: " + at.type);
                if(at.type==Symbol.Types.ARRAY)
                {
                        Attributes aux = at.atts.get(0);
                        for(int i=0; i<6 && aux.atts.size()>0; i++)
                        {
                                aux = aux.atts.get(0);
                                System.err.println(aux.type);
                        }
                        if(aux.type!=Symbol.Types.INT)
                        {
                                {if (true) throw new ErrorSemantico("No puedes comparar un array entero con un booleano");}
                        }
                        if(at.extraType!=Symbol.Types.BOOL)
                        {
                                {if (true) throw new ErrorSemantico("El array tienen que devolver un booleano: "+at.type);}
                        }
                }
                else if(at.type== Symbol.Types.FUNCTION)
                {
                        if(at.extraType!=Symbol.Types.BOOL)
                        {
                                {if (true) throw new ErrorSemantico("La funcion tienen que devolver un booleano: "+at.type);}
                        }
                }
                else if(at.type!=Symbol.Types.BOOL)
                {
                        {if (true) throw new ErrorSemantico("Solo se admiten expresiones booleanas: "+at.type);}
                }
                sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
    jj_consume_token(tTHEN);
    instrucciones();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSIF:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(tELSIF);
      expresion(at);
if(at.type==Symbol.Types.ARRAY)
                {
                        if(at.extraType!=Symbol.Types.BOOL)
                        {
                                {if (true) throw new ErrorSemantico("El array tienen que devolver un booleano: "+at.type);}
                        }
                }
                else if(at.type== Symbol.Types.FUNCTION)
                {
                        if(at.extraType!=Symbol.Types.BOOL)
                        {
                                {if (true) throw new ErrorSemantico("La funcion tienen que devolver un booleano: "+at.type);}
                        }
                }
                else if(at.type!=Symbol.Types.BOOL)
                {
                        {if (true) throw new ErrorSemantico("Solo se admiten expresiones booleanas: "+at.type);}
                }
                sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();

                // if(at.type!=Symbol.Types.BOOL)
                // {
                // 	throw new ErrorSemantico("Solo se admiten expresiones booleanas: "+at.type);
                // }

      jj_consume_token(tTHEN);
      instrucciones();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tELSE:{
      jj_consume_token(tELSE);
      instrucciones();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(tENDIF);
System.err.println("Expresion/es de ifs condiciones: " + att);
}

  static final public void inst_while(Attributes att) throws ParseException {Attributes at = new Attributes();
    jj_consume_token(tWHILE);
    expresion(at);
if(at.type==Symbol.Types.ARRAY || at.type==Symbol.Types.FUNCTION)
                {
                        if(at.extraType!=Symbol.Types.BOOL)
                        {
                                {if (true) throw new ErrorSemantico("Solo se admiten expresiones booleanas: "+at.type);}
                        }
                }
                else if(at.type!=Symbol.Types.BOOL)
                {
                        {if (true) throw new ErrorSemantico("Solo se admiten expresiones booleanas: "+at.type);}
                }
                sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
    jj_consume_token(tLOOP);
    instrucciones();
    jj_consume_token(tENDLOOP);
System.err.println("Expresion while condicion: " + att);
}

  static final public void inst_return(Attributes att) throws ParseException {Attributes at = new Attributes();
    jj_consume_token(tRETURN);
    expresion(at);
att.atts.add(at.clone());
                at = new Attributes();
}

  static final public void inst_null(Attributes att) throws ParseException {
    jj_consume_token(tNULL);
System.err.println("Expresion null");
}

  static final public void expresion(Attributes att) throws ParseException {Boolean esBool = false;
        Attributes at = new Attributes();
    relacion(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAND:
    case tOR:{
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAND:{
          jj_consume_token(tAND);
          break;
          }
        case tOR:{
          jj_consume_token(tOR);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
att.type = Symbol.Types.BOOL;
                esBool = true;
        relacion(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAND:
        case tOR:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_8;
        }
      }
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
// ( 2+3+4) + 5 + (2+3)
                // Expresion
                //  (2+3+4)
                //   5
                //  (2+3)
                if(esBool)
                {
                         for(Attributes a : att.atts)
                         {
                                System.err.println(a.type);
                                if(a.type == Symbol.Types.FUNCTION || a.type == Symbol.Types.ARRAY){
                                        if(a.extraType!=Symbol.Types.BOOL)
                                        {
                                                {if (true) throw new ErrorSemantico("Error de tipos");}
                                        }
                                        if(a.type == Symbol.Types.ARRAY){
                                                Attributes aux = a.atts.get(0);
                                                for(int i=0; i<5 && aux.atts.size()>0; i++)
                                                {
                                                        aux = aux.atts.get(0);
                                                        System.err.println(aux.type);
                                                }
                                                if(aux.type!=Symbol.Types.INT)
                                                {
                                                        {if (true) throw new ErrorSemantico("No puedes comparar un array entero con un booleano");}
                                                }
                                        }
                                } else{
                                        if(a.type!=Symbol.Types.BOOL)
                                        {
                                                {if (true) throw new ErrorSemantico("Error de tipos");}
                                        }
                                }
                         }
                         //System.out.println();
                }
}

  static final public void relacion(Attributes att) throws ParseException {//Attributes atTypes = new Attributes();
        Boolean tieneOpInts = null;
        Attributes at = new Attributes();
    expresion_simple(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tGE:
    case tLE:
    case tNEQ:
    case tEQ:
    case tGT:
    case tLS:{
      tieneOpInts = operador_relacional();
      expresion_simple(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
if(tieneOpInts!=null)
                {
                        att.type = Symbol.Types.BOOL;
                        if(tieneOpInts)
                        {
                                for(Attributes a : att.atts)
                                {
                                        if(a.type!=Symbol.Types.INT)
                                        {
                                                {if (true) throw new ErrorSemantico("Error de tipos. Se esperaban integers en relacion: "+
                                                att);}
                                        }
                                }
                        } else {
                                if(at.type != Symbol.Types.UNDEFINED)
                                {
                                        Attributes a2 = att.atts.get(att.atts.size()-2);
                                        if(a2.type == Symbol.Types.FUNCTION || a2.type == Symbol.Types.ARRAY)
                                        {
                                                if(a2.extraType!=at.type)
                                                {
                                                        {if (true) throw new ErrorSemantico("Error de tipos. Se esperaban el mismo tipo en relacion: " + a2.extraType + " y "+ at.type);}
                                                }
                                        } else if(at.type == Symbol.Types.FUNCTION || at.type == Symbol.Types.ARRAY)
                                        {
                                                if(a2.type!=at.extraType)
                                                {
                                                        {if (true) throw new ErrorSemantico("Error de tipos. Se esperaban el mismo tipo en relacion: " + a2.type + " y "+ at.extraType);}
                                                }
                                        }
                                        else if(a2.type!=at.type)
                                        {
                                                {if (true) throw new ErrorSemantico("Error de tipos. Se esperaban el mismo tipo en relacion: " + a2.type + " y "+ at.type);}
                                        }
                                }
                        }
                }
}

  static final public Boolean operador_relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQ:{
      jj_consume_token(tEQ);
{if ("" != null) return false;}
      break;
      }
    case tLS:{
      jj_consume_token(tLS);
{if ("" != null) return true;}
      break;
      }
    case tGT:{
      jj_consume_token(tGT);
{if ("" != null) return true;}
      break;
      }
    case tLE:{
      jj_consume_token(tLE);
{if ("" != null) return true;}
      break;
      }
    case tGE:{
      jj_consume_token(tGE);
{if ("" != null) return true;}
      break;
      }
    case tNEQ:{
      jj_consume_token(tNEQ);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public void expresion_simple(Attributes att) throws ParseException {boolean esInt=false;
        Attributes at = new Attributes();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tADD:
    case tSUB:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tADD:{
        jj_consume_token(tADD);
        break;
        }
      case tSUB:{
        jj_consume_token(tSUB);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
esInt=true;att.type=Symbol.Types.INT;
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    termino(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tADD:
      case tSUB:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tADD:{
        jj_consume_token(tADD);
        break;
        }
      case tSUB:{
        jj_consume_token(tSUB);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termino(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
                att.type = Symbol.Types.INT;
                for(Attributes a : att.atts)
                {
                        if(a.type!=Symbol.Types.INT)
                        {
                                {if (true) throw new ErrorSemantico("Error de tipos. Se esperaban integers en expresion simple: " + a.type);}
                        }
                }
    }
}

  static final public void termino(Attributes att) throws ParseException {Attributes at = new Attributes();
    factor(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tDIV:
      case tMUL:
      case tMOD:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_10;
      }
      operador_multiplicativo();
      factor(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                att.type = Symbol.Types.INT;
                at = new Attributes();

                for(Attributes a : att.atts)
                {
                        if(a.type!=Symbol.Types.INT)
                        {
                                {if (true) throw new ErrorSemantico("Error de tipos. Se esperaban integers en termino: " + att.atts.get(0).type);}
                        }
                }
    }
}

  static final public void operador_multiplicativo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tMUL:{
      jj_consume_token(tMUL);
      break;
      }
    case tMOD:{
      jj_consume_token(tMOD);
      break;
      }
    case tDIV:{
      jj_consume_token(tDIV);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void factor(Attributes att) throws ParseException {Attributes at = new Attributes();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAP:
    case tSUB:
    case tTRUE:
    case tFALSE:
    case tINT2CHAR:
    case tCHAR2INT:
    case tCONST_CHAR:
    case tCONST_INT:
    case tCONST_STRING:
    case tID:{
      primario(at);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                at = new Attributes();
      break;
      }
    case tNOT:{
      jj_consume_token(tNOT);
      primario(at);
att.type = Symbol.Types.BOOL;
                sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
                if(at.type == Symbol.Types.ARRAY)
                {
                        if(at.extraType!=Symbol.Types.BOOL)
                        {
                                {if (true) throw new ErrorSemantico("El array tienen que devolver un booleano: "+at.type);}
                        }
                }
                else if(at.type == Symbol.Types.FUNCTION)
                {
                        if(at.extraType!=Symbol.Types.BOOL)
                        {
                                {if (true) throw new ErrorSemantico("La funcion tienen que devolver un booleano: "+at.type);}
                        }
                }
                else if(at.type!=Symbol.Types.BOOL)
                {
                        {if (true) throw new ErrorSemantico("Solo se admiten expresiones booleanas: "+at.type);}
                }
                at = new Attributes();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void primario(Attributes att) throws ParseException {Attributes at = new Attributes();

        Token t;
        Symbol S;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAP:{
      jj_consume_token(tAP);
      expresion(at);
      jj_consume_token(tCP);
sf.add_to_atts(att,at);
                sf.heredar_valores(att,at);
      break;
      }
    case tINT2CHAR:{
      jj_consume_token(tINT2CHAR);
      jj_consume_token(tAP);
      expresion(at);
      jj_consume_token(tCP);
if(at.type!=Symbol.Types.INT)
                {
                        {if (true) throw new ErrorSemantico("int2char solo acepta enteros");}
                }
                sf.asignar_valores(att,at,"int2char(" + at.code + ")",Symbol.Types.CHAR, Symbol.ParameterClass.VAL, st.level);
                sf.heredar_valores(att,at);
      break;
      }
    case tCHAR2INT:{
      jj_consume_token(tCHAR2INT);
      jj_consume_token(tAP);
      expresion(at);
      jj_consume_token(tCP);
if(at.type!=Symbol.Types.CHAR)
                {
                        {if (true) throw new ErrorSemantico("char2int solo acepta caracteres");}
                }
                sf.asignar_valores(att,at,"char2int(" + at.code + ")",Symbol.Types.INT, Symbol.ParameterClass.VAL, st.level);
                sf.heredar_valores(att,at);
      break;
      }
    case tID:{
      t = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAP:{
        jj_consume_token(tAP);
        function_call(at);
        jj_consume_token(tCP);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
try
                {
                        S = st.getSymbol(t.image);
                        sf.cambiarTipos(at, S);
                        sf.asignar_valores(att,at,t.image,S.type, S.parClass, st.level);
                        sf.checkPrimarioIds(at);
                        at = new Attributes();
                }
                catch(SymbolNotFoundException ex)
                {
                        {if (true) throw new ErrorSemantico(t.image + " no existe.");}
                }
      break;
      }
    case tSUB:
    case tCONST_INT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUB:{
        jj_consume_token(tSUB);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      t = jj_consume_token(tCONST_INT);
sf.asignar_valores(att,at,t.image,Symbol.Types.INT, Symbol.ParameterClass.VAL, st.level);
      break;
      }
    case tCONST_CHAR:{
      t = jj_consume_token(tCONST_CHAR);
sf.asignar_valores(att,at,t.image,Symbol.Types.CHAR, Symbol.ParameterClass.VAL, st.level);
      break;
      }
    case tCONST_STRING:{
      t = jj_consume_token(tCONST_STRING);
sf.asignar_valores(att,at,t.image,Symbol.Types.STRING, Symbol.ParameterClass.VAL, st.level);
      break;
      }
    case tTRUE:{
      t = jj_consume_token(tTRUE);
sf.asignar_valores(att,at,"true",Symbol.Types.BOOL, Symbol.ParameterClass.VAL, st.level);
      break;
      }
    case tFALSE:{
      t = jj_consume_token(tFALSE);
sf.asignar_valores(att,at,"false",Symbol.Types.BOOL, Symbol.ParameterClass.VAL, st.level);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void function_call(Attributes att) throws ParseException {Attributes at = new Attributes();
    expresion(at);
sf.add_to_atts(att,at);
        sf.heredar_valores(att,at);
        at = new Attributes();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMA:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
      jj_consume_token(tCOMA);
      expresion(at);
sf.add_to_atts(att,at);
        sf.heredar_valores(att,at);
    }

}

  static final public void tipo_variable(Attributes atTypes, Attributes atIsArray) throws ParseException {Token i;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tARRAY:{
      jj_consume_token(tARRAY);
      jj_consume_token(tAP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUB:{
        jj_consume_token(tSUB);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      i = jj_consume_token(tCONST_INT);
atTypes.inicio = Integer.parseInt(i.image);

                        //at.parList.add(new Symbol(i.image,Symbol.Types.INT));

      jj_consume_token(64);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUB:{
        jj_consume_token(tSUB);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      i = jj_consume_token(tCONST_INT);
atTypes.fin = Integer.parseInt(i.image);
                        // at.parList.add(new Symbol(i.image,Symbol.Types.INT));
                        atTypes.type = Symbol.Types.ARRAY;
      jj_consume_token(tCP);
      jj_consume_token(tOF);
      tipo_variable_simple(atIsArray);
      break;
      }
    case tBOOL:
    case tCHAR:
    case tINT:{
      tipo_variable_simple(atTypes);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void tipo_variable_simple(Attributes at) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tBOOL:{
      jj_consume_token(tBOOL);
at.type = Symbol.Types.BOOL;
      break;
      }
    case tCHAR:{
      jj_consume_token(tCHAR);
at.type = Symbol.Types.CHAR;
      break;
      }
    case tINT:{
      jj_consume_token(tINT);
at.type = Symbol.Types.INT;
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40000000,0x0,0x800,0x800,0x0,0x800,0x0,0x800,0x800,0x38041000,0x0,0x400000,0x0,0x0,0x40000000,0x40000000,0x4000000,0x38041000,0x40000000,0x40000000,0x0,0x4000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x42000000,0x40000000,0x0,0x40000000,0x0,0x0,0x0,0x780,0x380,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x8000000,0x20000,0x20000,0x8000000,0x20000,0x8000000,0x20000,0x20000,0x80d0000,0x8000000,0x0,0x4000,0x4000,0x0,0x0,0x0,0x80d0000,0x0,0x0,0x1,0x0,0x0,0x300,0x300,0x300,0x7e,0x7e,0xc00,0xc00,0xc00,0xc00,0xb000,0xb000,0xff00800,0x0,0x800,0xff00800,0x4000,0x800,0x800,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[65];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 43; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 65; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
