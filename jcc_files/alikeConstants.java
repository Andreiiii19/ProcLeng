/* Generated By:JavaCC: Do not edit this line. alikeConstants.java */
package traductor;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface alikeConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int tCOMMENT = 1;
  /** RegularExpression Id. */
  int LETTER = 2;
  /** RegularExpression Id. */
  int DIGIT = 3;
  /** RegularExpression Id. */
  int CHAR = 4;
  /** RegularExpression Id. */
  int STRING = 5;
  /** RegularExpression Id. */
  int COMMENT = 6;
  /** RegularExpression Id. */
  int tBOOL = 7;
  /** RegularExpression Id. */
  int tCHAR = 8;
  /** RegularExpression Id. */
  int tINT = 9;
  /** RegularExpression Id. */
  int tARRAY = 10;
  /** RegularExpression Id. */
  int tPROC = 11;
  /** RegularExpression Id. */
  int tIF = 12;
  /** RegularExpression Id. */
  int tTHEN = 13;
  /** RegularExpression Id. */
  int tELSIF = 14;
  /** RegularExpression Id. */
  int tELSE = 15;
  /** RegularExpression Id. */
  int tENDIF = 16;
  /** RegularExpression Id. */
  int tEND = 17;
  /** RegularExpression Id. */
  int tWHILE = 18;
  /** RegularExpression Id. */
  int tLOOP = 19;
  /** RegularExpression Id. */
  int tENDLOOP = 20;
  /** RegularExpression Id. */
  int tBEGIN = 21;
  /** RegularExpression Id. */
  int tREF = 22;
  /** RegularExpression Id. */
  int tOF = 23;
  /** RegularExpression Id. */
  int tIS = 24;
  /** RegularExpression Id. */
  int tNOT = 25;
  /** RegularExpression Id. */
  int tPC = 26;
  /** RegularExpression Id. */
  int tPLINE = 27;
  /** RegularExpression Id. */
  int tPUT = 28;
  /** RegularExpression Id. */
  int tRETURN = 29;
  /** RegularExpression Id. */
  int tAP = 30;
  /** RegularExpression Id. */
  int tCP = 31;
  /** RegularExpression Id. */
  int tASIG = 32;
  /** RegularExpression Id. */
  int tGE = 33;
  /** RegularExpression Id. */
  int tLE = 34;
  /** RegularExpression Id. */
  int tNEQ = 35;
  /** RegularExpression Id. */
  int tEQ = 36;
  /** RegularExpression Id. */
  int tGT = 37;
  /** RegularExpression Id. */
  int tLS = 38;
  /** RegularExpression Id. */
  int tDP = 39;
  /** RegularExpression Id. */
  int tAND = 40;
  /** RegularExpression Id. */
  int tOR = 41;
  /** RegularExpression Id. */
  int tADD = 42;
  /** RegularExpression Id. */
  int tSUB = 43;
  /** RegularExpression Id. */
  int tDIV = 44;
  /** RegularExpression Id. */
  int tMUL = 45;
  /** RegularExpression Id. */
  int tCOMA = 46;
  /** RegularExpression Id. */
  int tMOD = 47;
  /** RegularExpression Id. */
  int tSKIP = 48;
  /** RegularExpression Id. */
  int tFUNC = 49;
  /** RegularExpression Id. */
  int tNULL = 50;
  /** RegularExpression Id. */
  int tGET = 51;
  /** RegularExpression Id. */
  int tTRUE = 52;
  /** RegularExpression Id. */
  int tFALSE = 53;
  /** RegularExpression Id. */
  int tINT2CHAR = 54;
  /** RegularExpression Id. */
  int tCHAR2INT = 55;
  /** RegularExpression Id. */
  int tCONST_CHAR = 56;
  /** RegularExpression Id. */
  int tCONST_INT = 57;
  /** RegularExpression Id. */
  int tCONST_STRING = 58;
  /** RegularExpression Id. */
  int tID = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<tCOMMENT>",
    "<LETTER>",
    "<DIGIT>",
    "<CHAR>",
    "<STRING>",
    "<COMMENT>",
    "\"boolean\"",
    "\"character\"",
    "\"integer\"",
    "\"array\"",
    "\"procedure\"",
    "\"if\"",
    "\"then\"",
    "\"elsif\"",
    "\"else\"",
    "<tENDIF>",
    "\"end\"",
    "\"while\"",
    "\"loop\"",
    "\"end loop\"",
    "\"begin\"",
    "\"ref\"",
    "\"of\"",
    "\"is\"",
    "\"not\"",
    "\";\"",
    "\"put_line\"",
    "\"put\"",
    "\"return\"",
    "\"(\"",
    "\")\"",
    "\":=\"",
    "\">=\"",
    "\"<=\"",
    "\"/=\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\":\"",
    "\"and\"",
    "\"or\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\",\"",
    "\"mod\"",
    "\"skip_line\"",
    "\"function\"",
    "\"null\"",
    "\"get\"",
    "\"true\"",
    "\"false\"",
    "\"int2char\"",
    "\"char2int\"",
    "<tCONST_CHAR>",
    "<tCONST_INT>",
    "<tCONST_STRING>",
    "<tID>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"..\"",
  };

}
